<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>sc-admin-server</artifactId>
	<version>0.1.0</version>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.3.RELEASE</version>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
		
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui</artifactId>
			<version>1.5.6</version>
		</dependency>
		<!-- 
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui-activiti</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui-hystrix</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui-turbine</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui-login</artifactId>
			<version>1.5.6</version>
		</dependency>
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<version>1.5.6</version>
		</dependency>-->

	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Edgware.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<properties>

		<java.version>1.8</java.version>
		<!-- -->
		<spring-boot.version>1.5.3.RELEASE</spring-boot.version>
		<hystrix-dashboard.version>1.5.12</hystrix-dashboard.version>
	</properties>


	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<!-- 详见：https://github.com/spotify/docker-maven-plugin -->
				<!-- mvn clean package docker:build -->
				<!-- docker run -p 8761:8761 sc-eureka-server -->
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				<configuration>
					<!-- win7toolbox需要配置以下两行 -->
					<!-- 插件默认使用localhost:2375去连接Docker如果Docker端口不是2375 需要配置环境变量DOCKER_HOST=tcp://<host>:2375 -->
					<dockerHost>https://192.168.99.100:2376</dockerHost>
					<dockerCertPath>C:\Users\Administrator\.docker\machine\machines\default</dockerCertPath>
					<!-- 注意imageName要是符合正则[a-z0-9-_.]的否则构建不会成功 -->
					<imageName>192.168.99.100:5000/${project.name}:${project.version}</imageName>
					<baseImage>java:alpine</baseImage>
					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
					<resources>
						<resource>
							<targetPath>/</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<!-- 以上等价于/src/main/docker/Dockerfile: FROM java ADD /sc-eureka-server-0.1.0.jar 
						// ENTRYPOINT java -jar /sc-eureka-server-0.1.0.jar 指定Dockerfile所在的路径 <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory> -->
					<!-- 发布到镜像私库，serverId在maven配置文件settings.xml一致 <imageName>镜像私库地址/${project.name}:${project.version}</imageName> 
						<serverId>docker-registry</serverId> -->
					<!-- 以下两行是为了docker push到DockerHub使用的。 <serverId>docker-hub</serverId> 
						<registryUrl>https://index.docker.io/v1/</registryUrl> -->

				</configuration>
			</plugin>
		</plugins>
	</build>
	<!-- 配置远程仓库的地址 <repositories> <repository> <id>repo-for-springcloud</id> 
		<name>repo-for-springcloud</name> <url>http://192.168.1.102:8081/repository/repo-for-springcloud/</url> 
		<snapshots> <enabled>true</enabled> </snapshots> <releases> <enabled>true</enabled> 
		</releases> </repository> </repositories> -->
	<!-- 配置部署的地址 <distributionManagement> <repository> <id>sc-releases</id> 
		<name>sc-releases repository</name> <url>http://192.168.1.102:8081/repository/sc-releases/</url> 
		</repository> <snapshotRepository> <id>sc-snapshots</id> <name>sc-snapshots 
		repository</name> <url>http://192.168.1.102:8081/repository/sc-snapshots/</url> 
		</snapshotRepository> </distributionManagement> -->
</project>
